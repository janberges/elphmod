diff --git a/EPW/src/Makefile b/EPW/src/Makefile
index c54db1ac6..18d037afa 100644
--- a/EPW/src/Makefile
+++ b/EPW/src/Makefile
@@ -11,2 +11,3 @@ MODFLAGS= $(BASEMOD_FLAGS) \
           $(MOD_FLAG)../../PW/src \
+          $(MOD_FLAG)../../PP/src \
           $(MOD_FLAG)../../PHonon/PH \
@@ -83,3 +84,4 @@ PWOBJS = ../../PW/src/libpw.a
 QEMODS = ../../Modules/libqemod.a ../../KS_Solvers/libks_solvers.a \
-         ../../upflib/libupf.a ../../FFTXlib/libqefft.a ../../dft-d3/libdftd3qe.a
+         ../../upflib/libupf.a ../../FFTXlib/libqefft.a ../../dft-d3/libdftd3qe.a \
+         ../../PP/src/libpp.a
 LIBOBJS =../../LAXlib/libqela.a ../../UtilXlib/libutil.a ../../clib/clib.a
diff --git a/EPW/src/ephwann_shuffle.f90 b/EPW/src/ephwann_shuffle.f90
index ea6825c88..7ce218a0d 100644
--- a/EPW/src/ephwann_shuffle.f90
+++ b/EPW/src/ephwann_shuffle.f90
@@ -376,2 +376,11 @@
   nrr_g = SIZE(irvec_g(1, :))
+  !
+  IF (ionode) THEN
+    OPEN (13, file='wigner.dat', action='write', status='replace', access='stream')
+    WRITE (13) dims, dims2
+    WRITE (13) nrr_k, irvec_k, ndegen_k
+    WRITE (13) nrr_g, irvec_g, ndegen_g
+    CLOSE (13)
+  ENDIF
+  !
   IF (use_ws) THEN
diff --git a/LR_Modules/Makefile b/LR_Modules/Makefile
index 7cddef733..e9a1b8bfc 100644
--- a/LR_Modules/Makefile
+++ b/LR_Modules/Makefile
@@ -5,3 +5,3 @@ include ../make.inc
 # location of needed modules and included files (if any)
-MODFLAGS=$(BASEMOD_FLAGS) $(MOD_FLAG)$(TOPDIR)/PW/src
+MODFLAGS=$(BASEMOD_FLAGS) $(MOD_FLAG)$(TOPDIR)/PW/src $(MOD_FLAG)$(TOPDIR)/PP/src
 
@@ -20,2 +20,3 @@ cg_psi.o \
 ccg_psi.o \
+cdfpt.o \
 ch_psi_all.o \
diff --git a/LR_Modules/cdfpt.f90 b/LR_Modules/cdfpt.f90
new file mode 100644
index 000000000..5b6b1bd28
--- /dev/null
+++ b/LR_Modules/cdfpt.f90
@@ -0,0 +1,164 @@
+!
+! Copyright (C) 2001-2016 Quantum ESPRESSO group
+! This file is distributed under the terms of the
+! GNU General Public License. See the file `License'
+! in the root directory of the present distribution,
+! or http://www.gnu.org/copyleft/gpl.txt .
+!
+!-----------------------------------------------------------------------
+MODULE cdfpt
+  !---------------------------------------------------------------------
+  !
+  ! This module provides routines to define an "active subspace" to be
+  ! used in constrained density-functional perturbation theory (cDFPT).
+  ! cDFPT has been introduced by Nomura & Arita, PRB 92, 245108 (2015).
+  !
+  USE kinds, ONLY : DP
+  !
+  USE cell_base, ONLY : at
+  USE io_files, ONLY : postfix, prefix, wfc_dir
+  USE io_global, ONLY : meta_ionode, meta_ionode_id, stdout
+  USE klist, ONLY : xk
+  USE mp_world, ONLY : world_comm
+  USE read_proj, ONLY : read_xml_proj
+  USE start_k, ONLY : nk1, nk2, nk3
+  USE wvfct, ONLY : nbnd
+  !
+  IMPLICIT NONE
+  PRIVATE
+  SAVE
+  !
+  PUBLIC :: lcdfpt, cdfpt_bnd, cdfpt_orb, bare
+  PUBLIC :: setup_cdfpt_subspace, in_cdfpt_subspace, expand_k_index
+  !
+  LOGICAL :: lcdfpt, bare
+  INTEGER :: cdfpt_bnd(100), cdfpt_orb(100)
+  !
+  LOGICAL, ALLOCATABLE :: subspace(:, :, :, :)
+  !
+  CONTAINS
+  !
+  !---------------------------------------------------------------------
+  SUBROUTINE setup_cdfpt_subspace
+     !------------------------------------------------------------------
+     !
+     CHARACTER(256) :: filename
+     INTEGER :: ierr, natomwfc, nbnd_proj, nkstot, nspin
+     REAL(DP) :: nelec, ef
+     REAL(DP), ALLOCATABLE :: xk_proj(:, :), wk(:), et(:, :)
+     COMPLEX(DP), ALLOCATABLE :: projs(:, :, :)
+     !
+     LOGICAL :: lbnd, lorb
+     INTEGER :: ik, k1, k2, k3, ibnd, iorb, norb, order(nbnd)
+     REAL(DP) :: weight
+     REAL(DP) :: weights(nbnd, nk1 * nk2 * nk3)
+     !
+     lbnd = ANY(cdfpt_bnd > 0)
+     lorb = ANY(cdfpt_orb > 0)
+     lcdfpt = lbnd .OR. lorb
+     !
+     IF (.NOT. lcdfpt) RETURN
+     !
+     filename = TRIM(wfc_dir) // TRIM(prefix) // postfix &
+        // 'atomic_proj.xml'
+     !
+     ALLOCATE(subspace(nbnd, nk1, nk2, nk3))
+     !
+     IF (meta_ionode) THEN
+        WRITE (stdout, "(/, 5x, 'cDFPT active subspace:')")
+        !
+        subspace = .TRUE.
+        !
+        IF (lbnd) THEN
+           DO ibnd = 1, nbnd
+              IF (.NOT. ANY(cdfpt_bnd == ibnd)) THEN
+                 subspace(ibnd, :, :, :) = .FALSE.
+              ENDIF
+           ENDDO
+        ENDIF
+        !
+        IF (lorb) THEN
+           CALL read_xml_proj(filename, ierr, natomwfc, nbnd_proj, &
+              nkstot, nspin, nelec, ef, xk_proj, wk, et, projs)
+           !
+           IF (ierr /= 0) THEN
+              CALL errore('setup_cdfpt_subspace', &
+                 'unable to read file ' // filename, 1)
+           ELSEIF (nkstot /= nk1 * nk2 * nk3) THEN
+              CALL errore('setup_cdfpt_subspace', &
+                 'wrong number of k points in ' // filename, 1)
+           ELSEIF (nbnd /= nbnd_proj) THEN
+              CALL errore('setup_cdfpt_subspace', &
+                 'wrong number of bands in ' // filename, 1)
+           ENDIF
+           !
+           weights = 0.D0
+           norb = 0
+           DO iorb = 1, natomwfc
+              IF (ANY(cdfpt_orb == iorb)) THEN
+                 weights = weights + ABS(projs(iorb, :, :)) ** 2
+                 norb = norb + 1
+              ENDIF
+           ENDDO
+           !
+           DO ik = 1, nkstot
+              CALL expand_k_index(xk_proj(:, ik), k1, k2, k3)
+              !
+              order(1) = 0
+              CALL hpsort(nbnd, weights(:, ik), order)
+              !
+              iorb = 0
+              DO ibnd = nbnd, 1, -1
+                 IF (subspace(order(ibnd), k1, k2, k3) .AND. iorb < norb) THEN
+                    iorb = iorb + 1
+                 ELSE
+                    subspace(order(ibnd), k1, k2, k3) = .FALSE.
+                 ENDIF
+              ENDDO
+           ENDDO
+        ENDIF
+        !
+        DO ibnd = 1, nbnd
+           IF (ALL(subspace(ibnd, :, :, :))) THEN
+              WRITE (stdout, "(5x, 'Complete band ', I0)") ibnd
+           ELSEIF (ANY(subspace(ibnd, :, :, :))) THEN
+              WRITE (stdout, "(5x, 'Parts of band ', I0)") ibnd
+           ENDIF
+        ENDDO
+     ENDIF
+     !
+     CALL bcast_logical(subspace, &
+        size(subspace), meta_ionode_id, world_comm)
+     !
+  END SUBROUTINE setup_cdfpt_subspace
+  !
+  !---------------------------------------------------------------------
+  LOGICAL FUNCTION in_cdfpt_subspace(ikk, ikq, ibnd, jbnd)
+     !------------------------------------------------------------------
+     !
+     INTEGER, INTENT(IN) :: ikk, ikq, ibnd, jbnd
+     !
+     INTEGER :: kk1, kk2, kk3, kq1, kq2, kq3
+     !
+     CALL expand_k_index(xk(:, ikk), kk1, kk2, kk3)
+     CALL expand_k_index(xk(:, ikq), kq1, kq2, kq3)
+     !
+     in_cdfpt_subspace = subspace(ibnd, kk1, kk2, kk3) &
+        .AND. subspace(jbnd, kq1, kq2, kq3)
+     !
+  END FUNCTION in_cdfpt_subspace
+  !
+  !---------------------------------------------------------------------
+  SUBROUTINE expand_k_index(xki, k1, k2, k3)
+     !------------------------------------------------------------------
+     !
+     REAL(DP), INTENT(IN) :: xki(3)
+     INTEGER, INTENT(OUT) :: k1, k2, k3
+     !
+     k1 = modulo(nint(nk1 * dot_product(at(:, 1), xki)), nk1) + 1
+     k2 = modulo(nint(nk2 * dot_product(at(:, 2), xki)), nk2) + 1
+     k3 = modulo(nint(nk3 * dot_product(at(:, 3), xki)), nk3) + 1
+     !
+  END SUBROUTINE expand_k_index
+  !
+END MODULE cdfpt
diff --git a/LR_Modules/orthogonalize.f90 b/LR_Modules/orthogonalize.f90
index 9b7bdcf43..d3be8ed5b 100644
--- a/LR_Modules/orthogonalize.f90
+++ b/LR_Modules/orthogonalize.f90
@@ -44,2 +44,3 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
   USE dfpt_tetra_mod,   ONLY : dfpt_tetra_beta
+  USE cdfpt,            ONLY : lcdfpt, in_cdfpt_subspace
   !
@@ -70,3 +71,3 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
   !
-  IF (ltetra .OR. lgauss) THEN
+  IF (ltetra .OR. lgauss .OR. lcdfpt) THEN
      !
@@ -92,2 +93,10 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
            DO jbnd = 1, nbnd
+              !
+              IF (lcdfpt) THEN
+                 IF (in_cdfpt_subspace(ikk, ikq, ibnd, jbnd)) THEN
+                    ps(jbnd, ibnd) = wg1 * ps(jbnd, ibnd)
+                    CYCLE
+                 ENDIF
+              ENDIF
+              !
               wgp = wgauss ( (ef - et (jbnd, ikq) ) / degauss, ngauss)
@@ -112,2 +121,11 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
            !
+        ELSEIF (lcdfpt) THEN
+           !
+           DO jbnd = nbnd_occ(ikq) + 1, nbnd
+              IF (.NOT. in_cdfpt_subspace(ikk, ikq, ibnd, jbnd)) THEN
+                 ps(jbnd, ibnd) = 0.0_DP
+              ENDIF
+           ENDDO
+           CYCLE
+           !
         ELSE
@@ -187,3 +205,3 @@ SUBROUTINE orthogonalize(dvpsi, evq, ikk, ikq, dpsi, npwq, dpsi_computed)
   !
-  IF (lgauss .OR. ltetra ) THEN
+  IF (lgauss .OR. ltetra .OR. lcdfpt) THEN
      !
diff --git a/PHonon/PH/Makefile b/PHonon/PH/Makefile
index bbf812df1..eca0c7590 100644
--- a/PHonon/PH/Makefile
+++ b/PHonon/PH/Makefile
@@ -7,2 +7,3 @@ MODFLAGS= $(BASEMOD_FLAGS) \
           $(MOD_FLAG)../../PW/src \
+          $(MOD_FLAG)../../PP/src \
           $(MOD_FLAG)../../dft-d3 \
@@ -203,3 +204,4 @@ PWOBJS = ../../PW/src/libpw.a
 QEMODS = ../../Modules/libqemod.a ../../KS_Solvers/libks_solvers.a ../../upflib/libupf.a \
-         ../../FFTXlib/libqefft.a ../../LAXlib/libqela.a ../../UtilXlib/libutil.a ../../dft-d3/libdftd3qe.a
+         ../../FFTXlib/libqefft.a ../../LAXlib/libqela.a ../../UtilXlib/libutil.a \
+         ../../dft-d3/libdftd3qe.a ../../PP/src/libpp.a
 TLDEPS= phlibs
diff --git a/PHonon/PH/do_phonon.f90 b/PHonon/PH/do_phonon.f90
index c05807b81..dd0417127 100644
--- a/PHonon/PH/do_phonon.f90
+++ b/PHonon/PH/do_phonon.f90
@@ -35,3 +35,3 @@ SUBROUTINE do_phonon(auxdyn)
                               only_wfc, rec_code, where_rec
-  USE el_phon,         ONLY : elph, elph_mat, elph_simple, elph_epa
+  USE el_phon,         ONLY : elph, elph_mat, elph_simple, elph_epa, elph_defpot
   !
@@ -141,3 +141,5 @@ SUBROUTINE do_phonon(auxdyn)
            CALL elph_do_ahc()
-        ELSE 
+        ELSEIF( elph_defpot ) THEN
+           CALL elph_print()
+        ELSE
            CALL elphsum()
diff --git a/PHonon/PH/elph.f90 b/PHonon/PH/elph.f90
index 183b11c3a..f02ce0204 100644
--- a/PHonon/PH/elph.f90
+++ b/PHonon/PH/elph.f90
@@ -14,3 +14,3 @@ MODULE el_phon
   !
-  LOGICAL :: elph, elph_mat, elph_simple, elph_epa
+  LOGICAL :: elph, elph_mat, elph_simple, elph_epa, elph_defpot
   INTEGER :: elph_nbnd_min, elph_nbnd_max
diff --git a/PHonon/PH/elphon.f90 b/PHonon/PH/elphon.f90
index 02b465d8e..5c6529506 100644
--- a/PHonon/PH/elphon.f90
+++ b/PHonon/PH/elphon.f90
@@ -1770 +1770,61 @@ subroutine lint ( nsym, s, minus_q, at, bg, npk, k1,k2,k3, &
 end subroutine lint
+!
+!-----------------------------------------------------------------------
+SUBROUTINE elph_print
+  !---------------------------------------------------------------------
+  !
+  ! This routine prints the electron-phonon matrix elements in Ry/bohr
+  ! in the Cartesian basis to standard output.
+  !
+  USE kinds, ONLY : dp
+  USE cdfpt, ONLY : expand_k_index
+  USE control_lr, ONLY : lgamma
+  USE el_phon, ONLY : el_ph_mat
+  USE io_global, ONLY : stdout
+  USE ions_base, ONLY : nat
+  USE klist, ONLY : xk
+  USE modes, ONLY : u
+  USE mp_pools, ONLY : npool
+  USE qpoint, ONLY : nksq, nksqtot
+  USE wvfct, ONLY : nbnd
+  !
+  IMPLICIT NONE
+  !
+  INTEGER :: i, ibnd, jbnd, ik, k1, k2, k3
+  COMPLEX(dp), POINTER :: d_pat(:, :, :, :)
+  COMPLEX(dp) :: d
+  !
+  IF (npool == 1) THEN
+     d_pat => el_ph_mat
+  ELSE
+     ALLOCATE(d_pat(nbnd, nbnd, nksqtot, 3 * nat))
+     !
+     CALL el_ph_collect(3 * nat, el_ph_mat, d_pat, nksqtot, nksq)
+  ENDIF
+  !
+  WRITE (stdout, '(/, 5X, A, /)') &
+     'Printing the electron-phonon matrix elements in Ry/bohr'
+  !
+  WRITE (stdout, '(6A4, 2A14)') &
+     'i', 'm', 'n', 'k1', 'k2', 'k3', 'Re[d]', 'Im[d]'
+  !
+  DO i = 1, 3 * nat
+     DO jbnd = 1, nbnd
+        DO ibnd = 1, nbnd
+           DO ik = 1, nksqtot
+              d = DOT_PRODUCT(u(i, :), d_pat(jbnd, ibnd, ik, :))
+              !
+              CALL expand_k_index(xk(:, &
+                 MERGE(ik, 2 * ik - 1, lgamma)), k1, k2, k3)
+              !
+              WRITE (stdout, '(6I4, 2ES14.6)') &
+                 i, jbnd, ibnd, k1 - 1, k2 - 1, k3 - 1, REAL(d), AIMAG(d)
+           ENDDO
+        ENDDO
+     ENDDO
+  ENDDO
+  !
+  WRITE (stdout, '(/, 5X, A, /)') &
+     'End of the electron-phonon matrix elements'
+  !
+END SUBROUTINE elph_print
diff --git a/PHonon/PH/phq_readin.f90 b/PHonon/PH/phq_readin.f90
index 59d22f45a..aaf86c145 100644
--- a/PHonon/PH/phq_readin.f90
+++ b/PHonon/PH/phq_readin.f90
@@ -64,2 +64,3 @@ SUBROUTINE phq_readin()
   USE el_phon,       ONLY : elph,elph_mat,elph_simple,elph_epa,elph_nbnd_min, elph_nbnd_max, &
+                            elph_defpot, &
                             el_ph_sigma, el_ph_nsigma, el_ph_ngauss,auxdvscf
@@ -68,2 +69,3 @@ SUBROUTINE phq_readin()
   USE qpoint,        ONLY : nksq, xq
+  USE cdfpt,         ONLY : lcdfpt, cdfpt_bnd, cdfpt_orb, setup_cdfpt_subspace, bare
   USE control_lr,    ONLY : lgamma, lrpa
@@ -128,3 +130,3 @@ SUBROUTINE phq_readin()
                        wpot_dir, ahc_dir, ahc_nbnd, ahc_nbndskip, &
-                       skip_upperfan
+                       skip_upperfan, cdfpt_bnd, cdfpt_orb, bare
 
@@ -341,2 +343,6 @@ SUBROUTINE phq_readin()
   !
+  cdfpt_bnd = 0
+  cdfpt_orb = 0
+  bare = .FALSE.
+  !
   ! ...  reading the namelist inputph
@@ -389,2 +395,6 @@ SUBROUTINE phq_readin()
   !
+  CALL mp_bcast(cdfpt_bnd, meta_ionode_id, world_comm)
+  CALL mp_bcast(cdfpt_orb, meta_ionode_id, world_comm)
+  CALL mp_bcast(bare, meta_ionode_id, world_comm)
+  !
   drho_star%dir=trimcheck(drho_star%dir)
@@ -422,2 +432,3 @@ SUBROUTINE phq_readin()
   elph_tetra = 0
+  elph_defpot = .false.
   SELECT CASE( trim( electron_phonon ) )
@@ -444,2 +455,8 @@ SUBROUTINE phq_readin()
      elph_epa=.false.
+  CASE( 'defpot' )
+     elph=.true.
+     elph_mat=.false.
+     elph_simple=.false.
+     elph_epa=.false.
+     elph_defpot=.true.
   ! YAMBO >
@@ -909,3 +926,3 @@ SUBROUTINE phq_readin()
   IF (elph .AND. .NOT.(lgauss .OR. ltetra) &
-      .AND. .NOT. (elph_yambo .OR. elph_ahc)) &
+      .AND. .NOT. (elph_yambo .OR. elph_ahc .OR. elph_defpot)) &
           CALL errore ('phq_readin', 'Electron-phonon only for metals', 1)
@@ -959,2 +976,4 @@ SUBROUTINE phq_readin()
   !
+  CALL setup_cdfpt_subspace
+  !
   RETURN
diff --git a/PHonon/PH/prepare_q.f90 b/PHonon/PH/prepare_q.f90
index 12c739998..b10d58316 100644
--- a/PHonon/PH/prepare_q.f90
+++ b/PHonon/PH/prepare_q.f90
@@ -43,2 +43,3 @@ SUBROUTINE prepare_q(auxdyn, do_band, do_iq, setup_pw, iq)
   USE qpoint,          ONLY : xq
+  USE cdfpt,           ONLY : lcdfpt, bare
   USE control_lr,      ONLY : lgamma
@@ -139,3 +140,3 @@ SUBROUTINE prepare_q(auxdyn, do_band, do_iq, setup_pw, iq)
         !
-        IF ( .NOT. (lgauss .OR. ltetra)) THEN
+        IF (.NOT. (lgauss .OR. ltetra) .OR. lcdfpt .OR. bare) THEN
            !
diff --git a/PHonon/PH/solve_e.f90 b/PHonon/PH/solve_e.f90
index d2411bb4c..47f4a8432 100644
--- a/PHonon/PH/solve_e.f90
+++ b/PHonon/PH/solve_e.f90
@@ -62,2 +62,3 @@ subroutine solve_e
   USE eqv,                   ONLY : dpsi, dvpsi
+  USE cdfpt,                 ONLY : lcdfpt, bare
   USE control_lr,            ONLY : nbnd_occ, lgamma
@@ -164,4 +165,4 @@ subroutine solve_e
   !
-  if ( (lgauss .or. ltetra) .or..not.lgamma) call errore ('solve_e', &
-       'called in the wrong case', 1)
+  if ((lgauss .or. ltetra) .and. .not. (lcdfpt .or. bare) .or. .not. lgamma) &
+     CALL errore('solve_e', 'called in the wrong case', 1)
   !
@@ -294,4 +295,6 @@ subroutine solve_e
 
-           call cgsolve_all (ch_psi_all,cg_psi,et(1,ikk),dvpsi,dpsi, &
-              h_diag,npwx,npw,thresh,ik,lter,conv_root,anorm,nbnd_occ(ikk),npol)
+           IF (.NOT. bare) THEN
+              call cgsolve_all (ch_psi_all,cg_psi,et(1,ikk),dvpsi,dpsi, &
+                 h_diag,npwx,npw,thresh,ik,lter,conv_root,anorm,nbnd_occ(ikk),npol)
+           ENDIF
 
diff --git a/PHonon/PH/solve_linter.f90 b/PHonon/PH/solve_linter.f90
index 97d69aa28..255d83dfb 100644
--- a/PHonon/PH/solve_linter.f90
+++ b/PHonon/PH/solve_linter.f90
@@ -81,2 +81,3 @@ SUBROUTINE solve_linter (irr, imode0, npe, drhoscf)
   USE qpoint_aux,           ONLY : ikmks, ikmkmqs, becpt, alphapt
+  USE cdfpt,                ONLY : bare
   USE control_lr,           ONLY : nbnd_occ, lgamma
@@ -455,5 +456,7 @@ SUBROUTINE solve_linter (irr, imode0, npe, drhoscf)
               
-              call cgsolve_all (ch_psi_all, cg_psi, et(1,ikmk), dvpsi, dpsi, &
-                   h_diag, npwx, npwq, thresh, ik, lter, conv_root, &
-                   anorm, nbnd_occ(ikk), npol )
+              IF (.NOT. bare) THEN
+                 call cgsolve_all (ch_psi_all, cg_psi, et(1,ikmk), dvpsi, dpsi, &
+                      h_diag, npwx, npwq, thresh, ik, lter, conv_root, &
+                      anorm, nbnd_occ(ikk), npol )
+              ENDIF
 
